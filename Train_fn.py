# -*- coding: utf-8 -*-
"""Untitled13.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1W7x-8mBq_uZ56BoVaHJBRHA-Z8msYOp5
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import torch
from torch import nn
from torch import optim
from torch.nn import functional as F 
from torch.optim.lr_scheduler import _LRScheduler

from recochef.utils.iterators import batch_generator

import math
import copy
import pickle
import numpy as np
import pandas as pd
from textwrap import wrap
from sklearn.decomposition import PCA
from sklearn.model_selection import train_test_split

import matplotlib.pyplot as plt
plt.style.use('ggplot')
from tqdm import tqdm
import time
def train(X_train,y_train,batch,model,loss_fn,optimizer):
  running_loss=0.0
  for X_batch,y_batch in batch_generator(X_train,y_train, shuffle=True, bs=batch):
      model.train()
      prediction = model(X_batch[:, 0], X_batch[:, 1])
      loss = loss_fn(prediction, y_batch)
      loss.backward()
      optimizer.step()
      optimizer.zero_grad()
      running_loss+=loss.item()
  epoch_loss = running_loss / len(X_train)
  return epoch_loss 
def validation(X_valid,y_valid,batch,model,loss_fn,optimizer):
  running_loss=0.0
  for X_batch,y_batch in batch_generator(X_valid,y_valid, shuffle=True, bs=batch):
      model.eval()
      prediction = model(X_batch[:, 0], X_batch[:, 1])
      loss = loss_fn(prediction, y_batch)
      running_loss += loss.item()
  epoch_loss = running_loss/ len(X_valid)
  return epoch_loss