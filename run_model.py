# -*- coding: utf-8 -*-
"""Untitled13.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1W7x-8mBq_uZ56BoVaHJBRHA-Z8msYOp5
"""

import torch
from torch import nn
from torch import optim
from torch.nn import functional as F 
from torch.optim.lr_scheduler import _LRScheduler

from recochef.utils.iterators import batch_generator

import math
import copy
import pickle
import numpy as np
import pandas as pd
from textwrap import wrap
from sklearn.decomposition import PCA
from sklearn.model_selection import train_test_split

import matplotlib.pyplot as plt
plt.style.use('ggplot')
from tqdm import tqdm
import time
from reduce_size_df import reduce_mem_usage
from pre_process import _preprocess_data
from Train_fn import train,validation
from Model import MLP
#from run_model import run_epochs
def run_epochs(features,hidden_sz,learning_rate,batch,epochs,patience,model_fn,training_data,testing_data):
    X_train = training_data[['u_id','i_id']]
    y_train = training_data[['rating']]
    X_valid = testing_data[['u_id','i_id']]
    y_valid = testing_data[['rating']]
    datasets = {'train': (X_train, y_train), 'val': (X_valid, y_valid)}
    dataset_sizes = {'train': len(X_train), 'val': len(X_valid)}
    n_users = training_data.u_id.nunique()
    n_movies = training_data.i_id.nunique()
    trainloss=[]
    valloss=[]
    model1 = model_fn(embedding_size=features, hidden_size=hidden_sz,num_users=n_users,num_items=n_movies)
    loss_fn = nn.MSELoss(reduction='sum')
    optimizer = torch.optim.Adam(model1.parameters(), lr=learning_rate)
    epochs=epochs
    batch=batch
    patience = patience
    no_improvements = 0
    best_loss = np.inf
    for i in range(epochs):
        start = time.time()
        trian_loss=train(X_train,y_train,batch,model1,loss_fn,optimizer)
        trainloss.append(trian_loss)
        val_loss=validation(X_valid,y_valid,batch,model1,loss_fn,optimizer)
        valloss.append(val_loss)
        end = time.time()
        print("Iteration: %d ;train_MSE =%.4f ;  val_MSE = %.4f ; time=%.4f" % (i+1,trian_loss, val_loss,(end-start)))
        if val_loss < best_loss:
          best_loss = val_loss
        else:
          no_improvements += 1
        if no_improvements >= patience:
          break
    return trainloss,valloss