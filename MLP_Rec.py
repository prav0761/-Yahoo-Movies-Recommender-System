# -*- coding: utf-8 -*-
"""kjj

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/11mJWq7f2Mv6u6_Dj0zciwuXRBQA4gRnQ
"""

from google.colab import drive

drive.mount('/content/gdrive/', force_remount=True)

# Commented out IPython magic to ensure Python compatibility.
# %cd gdrive
# %cd MyDrive
# %cd Colab Notebooks
# %cd Rec_final
# %cd MLP
!ls

import pandas as pd
!pip install -U -q git+https://github.com/sparsh-ai/recochef.git
import numpy as np
import matplotlib.pyplot as plt
import pandas
import torch
from torch import nn
from torch import optim
from torch.nn import functional as F 
from torch.optim.lr_scheduler import _LRScheduler
#!pip install -U -q git+https://github.com/sparsh-ai/recochef.git
from recochef.utils.iterators import batch_generator

import math
import copy
import pickle
import numpy as np
import pandas as pd
from textwrap import wrap
from sklearn.decomposition import PCA
from sklearn.model_selection import train_test_split

import matplotlib.pyplot as plt
plt.style.use('ggplot')
from tqdm import tqdm
import time
from reduce_size_df import reduce_mem_usage
from pre_process import _preprocess_data
from Train_fn import train,validation
from Model import MLP
from run_model import run_epochs

def Rec_Model(trainpath,testpath,features,hidden_sz,learning_rate,batch,epochs,patience,
                             model_fn):
  df=pd.read_csv(train_path,sep='\t',compression='gzip',encoding='latin-1',header=None)
  df_test=pd.read_csv(test_path,sep='\t',compression='gzip',encoding='latin-1',header=None)
  df=reduce_mem_usage(df)
  df_test=reduce_mem_usage(df_test)
  df.rename(columns={0: 'u_id', 1: 'i_id',3:'rating'},inplace=True)
  df_test.rename(columns={0: 'u_id', 1: 'i_id',3:'rating'},inplace=True)
  df_test.drop(2,axis='columns',inplace=True)
  df.drop(2,axis='columns',inplace=True)
  ratings_df,user_map,item_map=_preprocess_data(df)
  df_test['u_id']=df_test['u_id'].map(user_map)
  df_test['i_id']=df_test['i_id'].map(item_map)
  trainloss,valloss=run_epochs(features=features,hidden_sz=hidden_sz,learning_rate=learning_rate,batch=batch,epochs=epochs,patience=patience,
                              model_fn=model_fn,training_data=ratings_df,testing_data=df_test)
  plt.plot(valloss,color='blue',label='val_loss')
  plt.xlabel('epochs')
  plt.ylabel('MSE')
  plt.title('val_loss MSE')
  plt.plot(trainloss,label='train_loss')
  plt.legend()

train_path=r'ydata-ymovies-user-movie-ratings-train-v1_0.txt.gz'
test_path=r'ydata-ymovies-user-movie-ratings-test-v1_0.txt.gz'
Rec_Model(train_path,test_path,features=15,hidden_sz=100,learning_rate=0.001,batch=256,epochs=100,patience=5,
                             model_fn=MLP)